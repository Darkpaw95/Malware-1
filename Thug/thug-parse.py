#!/usr/bin/python
# Pull links from a Thug JSON report and check them against VT and GSB

import argparse
import os
import sys
import json
import urllib
import time
from pprint import pprint
from urlparse import urlparse
try:
    import requests
except:
    print "You need the requests library"


def load_gsbkey():
    """Load our API key from file"""
    fullpath = os.getenv("HOME")
    try:
        with open(fullpath + '/.googlesafe.key', 'r') as keyfile:
            for line in keyfile:
                googlekey = line.rstrip()
            keyfile.close()
            return googlekey
    except: 
        sys.exit("** ERROR ** \n> Key file not found. Please check ~/.googlesafe.key")


def google_lookup(url):
    """Check Google for our urls"""
    googlekey = load_gsbkey()
    encoded_url = urllib.quote_plus(url)
    google_url = "https://sb-ssl.google.com/safebrowsing/api/lookup?client=firefox&apikey=" + \
                    googlekey + "&appver=1.0&pver=3.0&url=" + \
                    encoded_url
    try:
        resp = requests.get(google_url)
    except:
        sys.exit("Error with request to Google")
    scode = resp.status_code
    if scode == 204:
        return 204
    if scode == 200:
    	body = resp.text
        return body
    elif scode == 400:
        return 400
    elif scode == 401:
        sys.exit("[Error: API key problem]")
    elif scode == 403:
        sys.exit("[Error: API key problem]")
    elif scode == 503:
        sys.exit("[Error: Service unavailable]")


def load_vtkey():
    """Load our API key from file"""
    fullpath = os.getenv("HOME")
    try:
        keyfile = open(fullpath + '/.virustotal.key', 'r')
    except: 
        sys.exit("** ERROR ** \n> Key file not found. Please check ~/.virustotal.key")

    for line in keyfile:
        vtkey = line.rstrip()
    keyfile.close()

    return vtkey


def virustotal_url_lookup(url):
    """Check a domain name against VT"""
    vtkey = load_vtkey()
    vturl = "https://www.virustotal.com/vtapi/v2/url/report"
    parameters = {"resource": url, "apikey": vtkey }
    try:
        resp = requests.get(vturl, params=parameters)
    except:
        sys.exit("Problem with the HTTP request to VT")

    report = resp.json()
    resp_code = report.get("response_code", {})
    if resp_code == 0:
        evilrating = 0
        pass
    else:
        evilness = report.get("positives", {})
        webutation = report.get("scans", {}).get("Webutation").get("result")
        if evilness == 0:
            pass
            evilrating = evilness
        elif evilness == 1:
            print "Possibly evil", 
            if webutation:
                print "(Evilness from Webutation)"
            evilrating = evilness
        elif evilness >= 2:
            evilrating = evilness

    return evilrating


def virustotal_domain_lookup(domain):
    """Check a domain name against VT"""
    vtkey = load_vtkey()
    vturl = "https://www.virustotal.com/vtapi/v2/domain/report"
    parameters = {"domain": domain, "apikey": vtkey }
    try:
        resp = requests.get(vturl, params=parameters)
    except:
        sys.exit("Problem with the HTTP request to VT")

    report = resp.json()
    resp_code = report.get("response_code", {})
    if resp_code == 0:
        evilrating = 0
        pass
    else:
        possibleevil = report.get("detected_urls", {})
        if possibleevil:
            for evil in possibleevil:
                evilness = evil["positives"]
                if evilness == 0:
                    evilrating = evilness
                if evilness == 1:
                    evilrating = evilness
                elif evilness >= 2:
                    evilrating = evilness
        else:
            evilrating = 0

    return evilrating


def extract_fqdn(url):
    """Extract our FQDN from the full URL"""
    parse_url = urlparse(url)

    return parse_url.hostname


def load_report(areport):
    """Load our report"""
    print "\n * Loading report",
    try:
        jreport=open(areport)
    except:
        sys.exit(" ** [Error: Problem loading report]")
    data = json.load(jreport)
    jreport.close()
    print "...ok"
    conns = data["connections"]
    count = 0
    for conn in conns:
        count += 1
    print " * Total links to review: " + str(count) + "\n"

    return conns


def report_summary():
    """Print out a happy little summary"""
    print "-" * 76
    print "\n[ Analysis Complete ]"
    print "\n[ Summary ]"
    print "\n * Google Safe Browsing Domain Lookups: " + str(gsbdomaincount)
    print " * Google Safe Browsing URL Lookups: " + str(gsburlcount)
    if vtreport == 1:
        print " * Virus Total Domain Lookups: " + str(vtdomaincount)
        print " * Virus Total URL Lookups: " + str(vturlcount) + "\n"
    else:
        print "\n[ No Virus Total Reporting Required ]"

    now = time.strftime("%Y-%m-%d %H:%M")
    print "\n[ Analysis Complete: " + now + "]"


def perform_lookups(areport):
    """Perform our lookups and report"""
    conns = load_report(areport)
    fqdn_list = []
    # Pull out the connection:destinations from the report
    print " * Sorting list and pulling out FQDN's for review",
    count = 0
    for conn in conns:
        fqdn = extract_fqdn(conn["destination"])
        # Leave out empty records 
        if fqdn == None:
            pass
        elif fqdn not in fqdn_list:
            count += 1
            fqdn_list.append(fqdn)
    print "...ok (" + str(count) + ")"

    print " * Sorting list and pulling out URLs for review",
    count = 0
    url_list = []
    for conn in conns:
        url = conn["destination"]
        if url == None:
            pass
        elif url == "javascript:\'\'":
            pass
        elif url not in url_list:
            count += 1
            url_list.append(url)
    print "...ok (" + str(count) + ")\n"

    print "-" * 25 + " [ Performing Lookups ] " + "-" * 25 + "\n"

    glr = google_lookups(fqdn_list, url_list)
    global vtreport
    vtreport = 0
    if glr >= 1:
        print "\n >> Google reported evil...running VT checks\n"
        virustotal_lookups(fqdn_list, url_list)
        vtreport = 1

    report_summary()


def google_lookups(fqdn_list, url_list):
    """Perform various Google lookups"""
    print "-" * 20 + " [ Google Safe Browsing Lookups ] " + "-" * 20

    # Do a GSB lookup for all domains
    print "\n * Google Safe Browsing Lookup on FQDN\n"
    count = 0
    for domain in fqdn_list:
        count += 1
        gsl = google_lookup(domain)
        if gsl == 204:
            pass
        elif gsl == 400:
            print "[Error 400: Bad Request]"
        elif gsl == "malware":
            print domain + " [Evil: " + gsl + "]"
    global gsbdomaincount
    gsbdomaincount = count
    print " " * 65 + "[ Done: " + str(count) +"]"

    # Do a GSB lookup for all URLs
    print "\n * Google Safe Browsing Lookup on URL\n"
    count = 0
    exported_evil = 0
    exported_list = []
    for url in url_list:
        count += 1
        gsl = google_lookup(url)
        if gsl == 204:
            pass
        elif gsl == 400:
            print url
            print "[Error 400: Bad Request]"
        elif gsl == "malware":
            print url + " [Evil: " + gsl + "]"
            exported_list.append(url)
            exported_evil = 1

    print " * Dumping URLs to file",
    with open("eyewitness.txt", 'w') as fh:
        for url in exported_list:
            print url
            fh.write(url)
    fh.close
    print "...ok"
    global gsburlcount
    gsburlcount = count
    print " " * 65 + "[ Done: " + str(count) + " ]"

    return exported_evil


def virustotal_lookups(fqdn_list, url_list):
    """Perform various VT lookups"""
    print "-" * 25 + " [ Virus Total Lookups ] " + "-" * 25

    # Do a VT lookup against all domains
    print "\n * Virus Total domain lookup\n"
    count = 0
    for domain in fqdn_list:
        count += 1
        vtl = virustotal_domain_lookup(domain)
        if vtl == 0:
            pass
        else:
            print domain + " [Evil: " + str(vtl) + "]"
    global vtdomaincount
    vtdomaincount = count
    print " " * 65 + "[ Done ]"

    # Do a VT lookup against all urls
    print "\n * Virus Total URL lookup\n"
    count = 0
    for url in url_list:
        count += 1
        vtl = virustotal_url_lookup(url)
        if vtl == 0:
            pass
        else:
            print  url + " [Evil: " + str(vtl) + "]"
    global vturlcount
    vturlcount = count
    print " " * 65 + "[ Done ]"


def __main__():
    """Get this party started"""
    parser = argparse.ArgumentParser(description='Thug report parser')
    parser.add_argument('--report', '-r', dest='report', help='Report to parse')
    parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()
    areport = args.report

    if not args.report:
        sys.exit(parser.print_help())
    else:
        print "[ Malvertising Checks Starting ]"
        perform_lookups(areport)


if __name__ == '__main__':
    __main__()

