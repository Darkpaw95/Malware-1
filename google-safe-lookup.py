#!/usr/bin/python
# Bulk Google Safe Browsing API lookup

import argparse
import sys
import os
try:
    import requests
except:
    print "You need the requests library"


def load_apikey():
    """Load our API key from file"""
    fullpath = os.getenv("HOME")
    try:
        with open(fullpath + '/.googlesafe.key', 'r') as keyfile:
			for line in keyfile:
				googlekey = line.rstrip()
				keyfile.close()
				return googlekey
    except: 
        sys.exit("** ERROR ** \n> Key file not found. Please check ~/.googlesafe.key")



def google_lookup(url):
    """Check Google for our urls"""
    googlekey = load_apikey()
    google_url = "https://sb-ssl.google.com/safebrowsing/api/lookup?client=firefox&apikey=" + \
                    googlekey + "&appver=1.0&pver=3.0&url=" + \
                    url
    try:
		# Simple GET request to Google
        resp = requests.get(google_url)
    except:
        sys.exit()
    scode = resp.status_code
    if scode == 204:
        print url, "[clean]"
    if scode == 200:
    	body = resp.text
        print url, "[EVIL: " + body + "]"
    elif scode == 400:
        print url, "[Error: Bad Request]"
    elif scode == 401:
        print "[Error: API key problem]"
    elif scode == 403:
        print "[Error: API key problem]"
    elif scode == 503:
        print "[Error: Service unavailable]"


def load_files(afile):
    """Load urls from file"""
    with open(afile, 'r') as fh:
		for line in fh:
			url = line.rstrip()
			google_lookup(url)


def __main__():
    """Get this party started"""
    parser = argparse.ArgumentParser(description='basic menu system')
    parser.add_argument('--file', '-f', dest='file', help='File to pull URLs from')
    parser.add_argument('--stdin', '-s', dest='stdin', help='Check the host supplied as an arguement')
    parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()
    afile = args.file
    astdin = args.stdin

    if not (args.file or args.stdin):
        sys.exit(parser.print_help())
    elif args.stdin:
		google_lookup(astdin)
    else:
        load_files(afile)


if __name__ == '__main__':
    __main__()