#!/usr/bin/python
# Simple hash checker for Virus total

import simplejson
import urllib
import urllib2
import pprint
import argparse
import sys
import getpass


def hashcheck(vtkey, ahash):
    """check hash against the virustotal.com database"""
    print "Checking hash: " + ahash
    url = "https://www.virustotal.com/vtapi/v2/file/report"

    parameters = {"resource": ahash, "apikey": vtkey }

    data = urllib.urlencode(parameters)
    req = urllib2.Request(url, data)
    try:
        response = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
        sys.exit(str(e))
    json = response.read()
    report = simplejson.loads(json)
    resp_code = report.get("response_code", {})
    if resp_code == 0:
        sys.exit("Exiting. \nGot an unexpected error back from VT")
    verb_msg = report.get("verbose_msg", {})
    scan_date = report.get("scan_date", {})
    evilness = report.get("positives", {})
    totaleng = report.get("total", {})
    permalink = report.get("permalink", {})
    # feel free to adjust these, check VT API docs
    trusted_av = ['McAfee', 'Symantec', 'ClamAV', 'Kaspersky', 'F-Secure', 'TrendMicro']
    print "Message: " + verb_msg
    print "Scan date: " + scan_date
    print "\nMalicious Detects: " + str(evilness) + "/" + str(totaleng)
    print "\nTrusted AV detections\n"
    for av in trusted_av:
        avreport = report.get("scans", {}).get(av, {}).get("result")
        print av + ": " + str(avreport)
    print "\nPermalink: " + permalink


def load_apikey(ahash):
    """Load our API key from file"""
    user = getpass.getuser()
    fullpath = '/home/' + user
    try:
        keyfile = open(fullpath + '/.virustotal.key', 'r')
    except: 
        sys.exit("** ERROR ** \n> Key file not found. Please check ~/.virustotal.key")

    for line in keyfile:
        vtkey = line.rstrip()
    keyfile.close()
    hashcheck(vtkey, ahash)


def __main__():
    """basic menu system"""
    parser = argparse.ArgumentParser(description='virustotal.com hash checker', usage='%(prog)s -h hash')
    parser.add_argument('--hash', '-H', dest='hash', help='hash to check')
    parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()
    ahash = args.hash

    if not args.hash:
        sys.exit(parser.print_help())

    load_apikey(ahash)


if __name__ == '__main__':
    __main__()
