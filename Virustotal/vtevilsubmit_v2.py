#!/usr/bin/python
# Simple file/url uploader for Virustotal using the requests module
# It expects your VT API Key in ~/.virustotal.key


import argparse
import sys
import requests
import getpass


def urlsubmit(asuburl):
    """Submit a URL for scanning"""
    vtkey = load_apikey()
    print "Checking for existing scan results"
    precheck = check_scanid(asuburl)
    if precheck == True:
        sys.exit()
    else:
        pass

    print "Submitting URL: " + asuburl
    vturl = "https://www.virustotal.com/vtapi/v2/url/scan"
    payload = {"url": asuburl, "apikey": vtkey }
    try:
        resp = requests.post(vturl, data=payload)
    except:
        sys.exit()

    report = resp.json()
    resp_code = report.get("response_code", {})
    if resp_code == 0:
        sys.exit("Exiting. \nGot an unexpected error back from VT")
    verb_msg = report.get("verbose_msg", {})
    scan_date = report.get("scan_date", {})
    scan_id = report.get("scan_id", {})
    permalink = report.get("permalink", {})
    print "Message: " + verb_msg
    print "Scan date: " + scan_date
    print "Scan id: " + scan_id
    print "\nPermalink: " + permalink
        

def check_scanid(ascanid):
    """Check VT for an existing scan ID"""
    vtkey = load_apikey()
    print "Checking scan ID: ", ascanid
    vturl = "https://www.virustotal.com/vtapi/v2/url/report"
    parameters = {"resource": ascanid, "apikey": vtkey }
    try:
        resp = requests.get(vturl, params=parameters)
    except:
        sys.exit()
    report = resp.json()
    resp_code = report.get("response_code", {})
    if resp_code == 0:
        print "No scan results found for: " + ascanid
        return False
    else:
        print "Existing scan results for: " + ascanid
        report = resp.json()
        verb_msg = report.get("verbose_msg", {})
        scan_date = report.get("scan_date", {})
        scan_url = report.get("url", {})
        evilness = report.get("positives", {})
        totaleng = report.get("total", {})
        permalink = report.get("permalink", {})
        # feel free to adjust these, check VT API docs
        trusted_av = ['CLEAN MX', 'MalwareDomainList', 'ZeusTracker', 'Google Safebrowsing', 'SpyEyeTracker', 'AlienVault']
        print "\nMessage: " + verb_msg
        print "Scan date: " + scan_date
        print "Scan URL: " + scan_url
        print "\nMalicious Detects: " + str(evilness) + "/" + str(totaleng)
        print "\nTrusted AV detections\n"
        for av in trusted_av:
            avreport = report.get("scans", {}).get(av, {}).get("result")
            print av + ": " + str(avreport)
        print "\nPermalink: " + permalink
        return True

def check_hash(ahash):
    """check hash against the virustotal.com database"""
    print "Checking VT API key"
    vtkey = load_apikey()
    print "Checking hash: ", ahash
    vturl = "https://www.virustotal.com/vtapi/v2/file/report"
    parameters = {"resource": ahash, "apikey": vtkey }
    try:
        resp = requests.get(vturl, params=parameters)
    except:
        sys.exit()

    report = resp.json()
    resp_code = report.get("response_code", {})
    if resp_code == 0:
        sys.exit("Exiting. \nGot an unexpected error back from VT")
    verb_msg = report.get("verbose_msg", {})
    scan_date = report.get("scan_date", {})
    evilness = report.get("positives", {})
    totaleng = report.get("total", {})
    permalink = report.get("permalink", {})
    # feel free to adjust these, check VT API docs
    trusted_av = ['McAfee', 'Symantec', 'ClamAV', 'Kaspersky', 'F-Secure', 'TrendMicro']
    print "Message: " + verb_msg
    print "Scan date: " + scan_date
    print "\nMalicious Detects: " + str(evilness) + "/" + str(totaleng)
    print "\nTrusted AV detections\n"
    for av in trusted_av:
        avreport = report.get("scans", {}).get(av, {}).get("result")
        print av + ": " + str(avreport)
    print "\nPermalink: " + permalink


def load_apikey():
    """Load our API key from file"""
    user = getpass.getuser()
    fullpath = '/home/' + user
    try:
        keyfile = open(fullpath + '/.virustotal.key', 'r')
    except: 
        sys.exit("** ERROR ** \n> Key file not found. Please check ~/.virustotal.key")

    for line in keyfile:
        vtkey = line.rstrip()
    keyfile.close()
    
    return vtkey


def __main__():
    """Lets get this party started"""        
    parser = argparse.ArgumentParser(description='Simple virustotal.com file/url uploader', usage='%(prog)s -h help')
    parser.add_argument('--hash', '-H', dest='hash', help='Check VT for this hash')
    parser.add_argument('--scanid', '-s', dest='scanid', help='Check VT for this scan ID')
    parser.add_argument('--file', '-f', dest='subfile', help='Submit file for scanning')
    parser.add_argument('--url', '-u', dest='suburl', help='Submit URL for scanning')
    parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1')
    args = parser.parse_args()
    ahash = args.hash
    ascanid = args.scanid
    asubfile = args.subfile
    asuburl = args.suburl


    # FIX ME LATER BITCH
    #if not args.hash:
    #    sys.exit(parser.print_help())

    if ahash:
        check_hash(ahash)
    elif ascanid:
        check_scanid(ascanid)
    elif asubfile:
        filesubmit(asubfile)
    elif asuburl:
        urlsubmit(asuburl)
    else:
        sys.exit(parser.print_help())        
    
        

if __name__ == "__main__":
        __main__()
