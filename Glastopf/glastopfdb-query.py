#!/usr/bin/python
# Simple Glastopf database query tool

from pysqlite2 import dbapi2 as sqlite
import sys
import argparse


def returnall(adatabase):
	print "Connecting to database"
	connection = sqlite.connect(adatabase)
	cursor = connection.cursor()
        cursor.execute('SELECT * FROM events')
        for row in cursor:
				print "\nDate: %s" % row[1]
				print "Attack ID: %s" % row[0]
				print "Attacker: %s" % row[2]
				print "Request: %s" % row[3]
				print "\n*** Raw Request ***\n%s" % row[4]
				print "-" * 80
	connection.close()


def search(adatabase, aid):
	print "Connecting to database"
	print "Returning info for attack ID: " + aid
	connection = sqlite.connect(adatabase)
	cursor = connection.cursor()
        cursor.execute("SELECT * FROM events WHERE id = '"+aid+"'")
        for row in cursor:
				print "\nDate: %s" % row[1]
				print "Attacker: %s" % row[2]
				print "Request: %s" % row[3]
				print "\n*** Raw Request ***\n%s" % row[4]
				print "-" * 80
	connection.close()


def ipquery(adatabase, asource):
	print "Connecting to database"
	print "Returning info for attacker: " + asource
	connection = sqlite.connect(adatabase)
	cursor = connection.cursor()
        cursor.execute("SELECT * FROM events WHERE source LIKE '%"+asource+"%'")
        for row in cursor:
				print "\nDate: %s" % row[1]
				print "Attacker: %s" % row[2]
				print "Request: %s" % row[3]
				print "\n*** Raw Request *** \n%s" % row[4]
				print "-" * 80
	connection.close()


# Not quite working yet
def methodquery(adatabase, amethod):
	print "Connecting to database"
	print "Returning info for method: " + amethod.upper()
	connection = sqlite.connect(adatabase)
	cursor = connection.cursor()
        cursor.execute("SELECT * FROM events WHERE request_url LIKE '%"+amethod+"%'")
        for row in cursor:
				print "\nDate: %s" % row[1]
				print "Attacker: %s" % row[2]
				print "Request: %s" % row[3]
				print "\n*** Raw Request *** \n%s" % row[4]
				print "-" * 80
	connection.close()


def __main__():

		parser = argparse.ArgumentParser(description='Basic Glastopf Database Query Tool')
		parser.add_argument('--database', '-d', dest='database', default='glastopf.db', help='Database to query')
		parser.add_argument('--all', '-a', dest='all', action="store_true", help='Return all queries')
		parser.add_argument('--id', '-i', dest='id', help='Search for a specific attack ID')
		parser.add_argument('--source', '-s', dest='source', help='Search for a specific attacker')
		parser.add_argument('--method', '-m', dest='method', help='Search for a specific methods')
		parser.add_argument('--version', '-v', action='version', version='%(prog)s 0.1')
		args = parser.parse_args()
		adatabase = args.database
 		aid = args.id
		asource = args.source
		amethod = args.method
		aall = args.all

		if not args.database:
				sys.exit(parser.print_help())

		if args.all:
				returnall(adatabase)
		if args.id:
			search(adatabase, aid)
		if args.source:
			ipquery(adatabase, asource)
		if args.method:
			methodquery(adatabase, amethod)


if __name__ == '__main__':
		__main__()

